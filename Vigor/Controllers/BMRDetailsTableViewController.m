//
//  BMRDetailsTableViewController.m
//  Vigor
//
//  Created by Avikant Saini on 4/24/16.
//  Copyright Â© 2016 Dark Army. All rights reserved.
//

#import "BMRDetailsTableViewController.h"

@interface BMRDetailsTableViewController ()<ORKTaskViewControllerDelegate, ORKPieChartViewDataSource>
{
	ORKInstructionStep *instructUser;
	ORKQuestionStep *sendFeedback;
	ORKFormStep *fillForm;
	
	KCSAppdataStore *store;
    KCSAppdataStore *dataStore;
    
    NSMutableArray *kinveyDataArray;
    
    CGFloat totalCount;
    CGFloat completedCount;
}

@property (weak, nonatomic) IBOutlet UILabel *abfpLabel;
@property (weak, nonatomic) IBOutlet UILabel *bmiLabel;
@property (weak, nonatomic) IBOutlet UILabel *bmrCountLabel;
@property (weak, nonatomic) IBOutlet UILabel *tciCountLabel;

@property (weak, nonatomic) IBOutlet ORKPieChartView *pieChartView;

@end

@implementation BMRDetailsTableViewController
{
	BOOL selected;
	
	CGFloat one;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    
    // Uncomment the following line to preserve selection between presentations.
    // self.clearsSelectionOnViewWillAppear = NO;
    
    // Uncomment the following line to display an Edit button in the navigation bar for this view controller.
    // self.navigationItem.rightBarButtonItem = self.editButtonItem;
	
	store = [KCSAppdataStore storeWithOptions:@{KCSStoreKeyCollectionName:@"Feedback",
												KCSStoreKeyCollectionTemplateClass:[OnlineFeedback class]}];
    dataStore = [KCSAppdataStore storeWithOptions:@{KCSStoreKeyCollectionName:@"Program",
                                                KCSStoreKeyCollectionTemplateClass:[Program class]}];
	
	selected = NO;
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)viewWillAppear:(BOOL)animated
{
	
	one = arc4random_uniform(100)/200.0;
	
	if (self.details)
    {
		[self updateIntake:1.22];
	}
    if (![KCSUser activeUser])
    {
        [KCSUser createAutogeneratedUser:nil completion:^(KCSUser *user, NSError *errorOrNil, KCSUserActionResult result)   {
            if (errorOrNil != nil)
            {
                //load failed
                NSLog(@"load fail user auth");
            }
            else
            {
                [self load:nil];
            }
        }];
    }
    else
    {
        
    }
}

- (void) load:(id) sender
{
    
    KCSCollection *listObjects = [KCSCollection collectionFromString:@"Program" ofClass:[Program class]];
    KCSAppdataStore *objectStore = [KCSAppdataStore storeWithCollection:listObjects options:nil];
    KCSQuery *query = [KCSQuery query];
    [query addSortModifier:[[KCSQuerySortModifier alloc] initWithField:KCSMetadataFieldLastModifiedTime inDirection:kKCSDescending]];
    [objectStore queryWithQuery:query withCompletionBlock:^(NSArray *objectsOrNil, NSError *errorOrNil) {
        //        [sender endRefreshing];
        if (errorOrNil != nil)
        {
            //An error happened, just log for now
            NSLog(@"An error occurred on fetch: %@", errorOrNil);
        }
        else
        {
            //got all events back from server -- update graph
            NSLog(@"STEP 1 completed");
            NSString *pgrmString = [[NSUserDefaults standardUserDefaults] objectForKey:@"CurrentProgram"];
            kinveyDataArray = [[objectsOrNil filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@"programName == %@", pgrmString]] mutableCopy];
            if ([[NSDate date] timeIntervalSinceDate:(NSDate *)[[NSUserDefaults standardUserDefaults] objectForKey:[NSString stringWithFormat:@"%@", [[NSUserDefaults standardUserDefaults] objectForKey:@"CurrentProgram"]]]] > 30 * 86400)
            {
                [self updateCompletionStats];
            }
            else
            {
                SVHUD_HIDE;
            }
        }
    } withProgressBlock:nil];
    
}

- (void) updateCompletionStats
{
    Program *program = [[Program alloc] init];
    program.programName = [[NSUserDefaults standardUserDefaults] objectForKey:@"CurrentProgram"];
    program.completed = [NSNumber numberWithBool:YES];
    program.notComplete = [NSNumber numberWithBool:YES];
    [dataStore saveObject:program withCompletionBlock:^(NSArray *objectsOrNil, NSError *errorOrNil)
         {
             if (errorOrNil != nil)
             {
                 //save failed
                 NSLog(@"Save failed, with error: %@", [errorOrNil localizedFailureReason]);
             } else
             {
                 //save was successful
                 NSLog(@"successful save");
                 totalCount = 0;
                 completedCount = 0;
                 for (int i=0; i<[kinveyDataArray count]; i++)
                 {
                     if ([[kinveyDataArray objectAtIndex:i] completed] == [NSNumber numberWithBool:YES])
                     {
                         completedCount++;
                     }
                     totalCount++;
                 }
                 SVHUD_HIDE;
             }
         } withProgressBlock:nil];

}

- (void)viewDidAppear:(BOOL)animated
{
	self.pieChartView.dataSource = self;
	self.pieChartView.showsTitleAboveChart = YES;
	self.pieChartView.text = [NSString stringWithFormat:@"%@ Stats", [[NSUserDefaults standardUserDefaults] objectForKey:@"CurrentProgram"]];
	self.pieChartView.lineWidth = 8.0;
	[self.pieChartView animateWithDuration:2.0];
	
	[super viewDidAppear:animated];
}


- (void)updateIntake:(CGFloat)multiplier
{
	CGFloat totalIntake = self.details.bmr * multiplier;
	_bmrCountLabel.text = [NSString stringWithFormat:@"%.2f KCal", self.details.bmr];
	_tciCountLabel.text = [NSString stringWithFormat:@"%.2f KCal", totalIntake];
	_bmiLabel.text = [NSString stringWithFormat:@"%.3f", self.details.bmi];
	_abfpLabel.text = [NSString stringWithFormat:@"%.3f", self.details.abfp];
}

#pragma mark - Table view data source

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
	if (selected)
		return 4;
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
	if (section == 0) return 5;
	if (section == 1) return 4;
	return 1;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
	if (indexPath.section == 0)
    {
		NSInteger tag = indexPath.row;
		switch (tag)
        {
			case 0:
				[self updateIntake:1.22];
				break;
			case 1:
				[self updateIntake:1.34];
				break;
			case 2:
				[self updateIntake:1.51];
				break;
			case 3:
				[self updateIntake:1.66];
				break;
			case 4:
				[self updateIntake:1.79];
				break;
			default:
				break;
		}
		selected = YES;
		[tableView reloadData];
		[tableView selectRowAtIndexPath:indexPath animated:YES scrollPosition:UITableViewScrollPositionTop];
		[tableView scrollToRowAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:1] atScrollPosition:UITableViewScrollPositionTop animated:YES];
	}
	else
    {
		[tableView deselectRowAtIndexPath:indexPath animated:YES];
	}
	
	if (indexPath.section == 3)
    {
		[self giveFeedbackAction:self];
	}
}

- (BOOL)tableView:(UITableView *)tableView shouldHighlightRowAtIndexPath:(NSIndexPath *)indexPath {
	return (indexPath.section == 0 || indexPath.section == tableView.numberOfSections - 1);
}

#pragma mark - ORKPieChartDelegate

- (NSInteger)numberOfSegmentsInPieChartView:(ORKPieChartView *)pieChartView
{
//    if (completedCount == 0 && totalCount == 0)
//        return 0;
//    if (completedCount == 0 || totalCount-completedCount == 0)
//        return 1;
	return 2;
}

- (CGFloat)pieChartView:(ORKPieChartView *)pieChartView valueForSegmentAtIndex:(NSInteger)index
{
//	if (index == 0)
//    {
//        return completedCount;
//    }
//    else
//    {
//        return totalCount-completedCount;
//    }
	if (index == 0)
		return one;
	return 1.0 - one;
}

- (UIColor *)pieChartView:(ORKPieChartView *)pieChartView colorForSegmentAtIndex:(NSInteger)index
{
	if (index == 0) return GLOBAL_BLUE_COLOR;
	else if (index == 1) return GLOBAL_GREEN_COLOR;
	return GLOBAL_RED_COLOR;
}

- (NSString *)pieChartView:(ORKPieChartView *)pieChartView titleForSegmentAtIndex:(NSInteger)index
{
    if (index == 0)
        return @"Completed";
    else
        return @"Ongoing";
}

- (IBAction)giveFeedbackAction:(id)sender
{
	instructUser = [[ORKInstructionStep alloc] initWithIdentifier:@"intro"];
	instructUser.title = @"Enter Your Feedback";
	
	fillForm = [[ORKFormStep alloc] initWithIdentifier:@"FeedbackForm" title:@"Comments" text:@""];
	ORKFormItem *feedbackItem = [[ORKFormItem alloc] initWithIdentifier:@"formItem" text:@"Give Your Feedback" answerFormat:[ORKAnswerFormat textAnswerFormat] optional:NO];
	fillForm.formItems = @[feedbackItem];
	
	ORKOrderedTask *task = [[ORKOrderedTask alloc] initWithIdentifier:@"task" steps:@[fillForm]];
	
	ORKTaskViewController *taskViewController =
	[[ORKTaskViewController alloc] initWithTask:task taskRunUUID:nil];
	taskViewController.delegate = self;
	
	[self presentViewController:taskViewController animated:YES completion:nil];
}

- (void)taskViewController:(ORKTaskViewController *)taskViewController didFinishWithReason:(ORKTaskViewControllerFinishReason)reason error:(NSError *)error
{
	ORKTaskResult *feedbackComplete = [taskViewController result];
	
	ORKStepResult *feedbackProvided = (ORKStepResult *) [feedbackComplete.results lastObject];
	
	if (reason == ORKTaskViewControllerFinishReasonCompleted)
	{
		
		NSString *feedbackString = [[feedbackProvided.results firstObject] valueForKey:@"answer"];
		
		// obtain input value from [[finalResult.results firstObject] valueForKey:@"answer"]
		// send this value to haven api, then send results of that to kinvey
		
		NSURL *URL = [NSURL URLWithString:@"https://api.havenondemand.com/1/api/sync/analyzesentiment/v1"];
		
		NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:URL];
		request.HTTPMethod = @"POST";
		
		NSString *httpBody = [NSString stringWithFormat:@"apikey=72e6bddf-7f53-4779-90e9-7b27688792a5&text=%@", feedbackString];
		request.HTTPBody = [httpBody dataUsingEncoding:NSUTF8StringEncoding];
		
		SVHUD_SHOW;
		
		[[[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {
			
			if (error)
				return;
			
			@try {
				id jsonData = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&error];
				NSLog(@"analyzesentiment:\n%@", jsonData);
				
				CGFloat aggscore = [[jsonData valueForKeyPath:@"aggregate.score"] doubleValue];
				NSString *aggString = [jsonData valueForKeyPath:@"aggregate.sentiment"];
				
				NSLog(@"Agg score = %.4f | Agg string = %@", aggscore, aggString);
				
				// Save to core data
				[Feedback createNewFeedbackWithDate:[NSDate date] review:aggString value:aggscore];
				
				// Push to server
				
				OnlineFeedback *feedback = [[OnlineFeedback alloc] init];
				feedback.dateOfUpload = [NSDate date];
				feedback.valueForFeedback = [NSNumber numberWithFloat:aggscore];
				feedback.review = aggString;
				feedback.programName = [[NSUserDefaults standardUserDefaults] objectForKey:@"CurrentProgram"];
				
				[store saveObject:feedback withCompletionBlock:^(NSArray *objectsOrNil, NSError *errorOrNil)
				 {
					 if (errorOrNil != nil)
					 {
						 //save failed
						 NSLog(@"Save failed, with error: %@", [errorOrNil localizedFailureReason]);
					 } else
					 {
						 //save was successful
						 NSLog(@"successful save");
					 }
				 } withProgressBlock:nil];
				
				SVHUD_HIDE;
				[self dismissViewControllerAnimated:YES completion:nil];
				
			}
			@catch (NSException *exception)
			{
				
			}
			
		}] resume];
	}
	else
	{
		[self dismissViewControllerAnimated:YES completion:nil];
	}
	
}


@end
