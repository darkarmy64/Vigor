//
//  BMRDetailsTableViewController.m
//  Vigor
//
//  Created by Avikant Saini on 4/24/16.
//  Copyright Â© 2016 Dark Army. All rights reserved.
//

#import "BMRDetailsTableViewController.h"

@interface BMRDetailsTableViewController ()<ORKTaskViewControllerDelegate, ORKPieChartViewDataSource> {
	ORKInstructionStep *instructUser;
	ORKQuestionStep *sendFeedback;
	ORKFormStep *fillForm;
	
	KCSAppdataStore *store;
}

@property (weak, nonatomic) IBOutlet UILabel *abfpLabel;
@property (weak, nonatomic) IBOutlet UILabel *bmiLabel;
@property (weak, nonatomic) IBOutlet UILabel *bmrCountLabel;
@property (weak, nonatomic) IBOutlet UILabel *tciCountLabel;

@property (weak, nonatomic) IBOutlet ORKPieChartView *pieChartView;

@end

@implementation BMRDetailsTableViewController {
	BOOL selected;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    
    // Uncomment the following line to preserve selection between presentations.
    // self.clearsSelectionOnViewWillAppear = NO;
    
    // Uncomment the following line to display an Edit button in the navigation bar for this view controller.
    // self.navigationItem.rightBarButtonItem = self.editButtonItem;
	
	store = [KCSAppdataStore storeWithOptions:@{KCSStoreKeyCollectionName:@"Feedback",
												KCSStoreKeyCollectionTemplateClass:[OnlineFeedback class]}];
	
	selected = NO;
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)viewWillAppear:(BOOL)animated {
	
	if (self.details) {
		[self updateIntake:1.22];
	}
	if (![KCSUser activeUser])
	{
		[KCSUser createAutogeneratedUser:nil completion:^(KCSUser *user, NSError *errorOrNil, KCSUserActionResult result)   {
			if (errorOrNil != nil)
			{
				//load failed
				NSLog(@"load fail user auth");
			}
			else
			{
			}
		}];
	}
	else
	{
	}
}

- (void)viewDidAppear:(BOOL)animated
{
	
	self.pieChartView.dataSource = self;
	self.pieChartView.showsTitleAboveChart = YES;
	self.pieChartView.text = [NSString stringWithFormat:@"%@ Stats", [[NSUserDefaults standardUserDefaults] objectForKey:@"CurrentProgram"]];
	self.pieChartView.lineWidth = 8.0;
	[self.pieChartView animateWithDuration:2.0];
	
	[super viewDidAppear:animated];
}


- (void)updateIntake:(CGFloat)multiplier
{
	CGFloat totalIntake = self.details.bmr * multiplier;
	_bmrCountLabel.text = [NSString stringWithFormat:@"%.2f KCal", self.details.bmr];
	_tciCountLabel.text = [NSString stringWithFormat:@"%.2f KCal", totalIntake];
	_bmiLabel.text = [NSString stringWithFormat:@"%.3f", self.details.bmi];
	_abfpLabel.text = [NSString stringWithFormat:@"%.3f", self.details.abfp];
}

#pragma mark - Table view data source

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
	if (selected)
		return 4;
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
	if (section == 0) return 5;
	if (section == 1) return 4;
	return 1;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
	if (indexPath.section == 0) {
		NSInteger tag = indexPath.row;
		switch (tag) {
			case 0:
				[self updateIntake:1.22];
				break;
			case 1:
				[self updateIntake:1.34];
				break;
			case 2:
				[self updateIntake:1.51];
				break;
			case 3:
				[self updateIntake:1.66];
				break;
			case 4:
				[self updateIntake:1.79];
				break;
			default:
				break;
		}
		selected = YES;
		[tableView reloadData];
		[tableView selectRowAtIndexPath:indexPath animated:YES scrollPosition:UITableViewScrollPositionTop];
	}
	else {
		[tableView deselectRowAtIndexPath:indexPath animated:YES];
	}
	
	if (indexPath.section == 3) {
		[self giveFeedbackAction:self];
	}
}

/*
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:<#@"reuseIdentifier"#> forIndexPath:indexPath];
 
    // Configure the cell...
 
    return cell;
}
*/

/*
// Override to support conditional editing of the table view.
- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath {
    // Return NO if you do not want the specified item to be editable.
    return YES;
}
*/

/*
// Override to support editing the table view.
- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath {
    if (editingStyle == UITableViewCellEditingStyleDelete) {
        // Delete the row from the data source
        [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];
    } else if (editingStyle == UITableViewCellEditingStyleInsert) {
        // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view
    }   
}
*/

/*
// Override to support rearranging the table view.
- (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)fromIndexPath toIndexPath:(NSIndexPath *)toIndexPath {
}
*/

/*
// Override to support conditional rearranging of the table view.
- (BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath {
    // Return NO if you do not want the item to be re-orderable.
    return YES;
}
*/

#pragma mark - ORKPieChartDelegate

- (NSInteger)numberOfSegmentsInPieChartView:(ORKPieChartView *)pieChartView
{
	return 2;
}

- (CGFloat)pieChartView:(ORKPieChartView *)pieChartView valueForSegmentAtIndex:(NSInteger)index
{
	return 0.5;
}

- (UIColor *)pieChartView:(ORKPieChartView *)pieChartView colorForSegmentAtIndex:(NSInteger)index
{
	if (index == 0) return GLOBAL_BLUE_COLOR;
	else if (index == 1) return GLOBAL_GREEN_COLOR;
	return GLOBAL_RED_COLOR;
}

- (NSString *)pieChartView:(ORKPieChartView *)pieChartView titleForSegmentAtIndex:(NSInteger)index
{
	if (index == 0) return @"Positive";
	else if (index == 1) return @"Neutral";
	return @"Negative";
}

/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

- (IBAction)giveFeedbackAction:(id)sender
{
	instructUser = [[ORKInstructionStep alloc] initWithIdentifier:@"intro"];
	instructUser.title = @"Enter Your Feedback";
	
	fillForm = [[ORKFormStep alloc] initWithIdentifier:@"FeedbackForm" title:@"Comments" text:@""];
	ORKFormItem *feedbackItem = [[ORKFormItem alloc] initWithIdentifier:@"formItem" text:@"Give Your Feedback" answerFormat:[ORKAnswerFormat textAnswerFormat] optional:NO];
	fillForm.formItems = @[feedbackItem];
	
	ORKOrderedTask *task = [[ORKOrderedTask alloc] initWithIdentifier:@"task" steps:@[fillForm]];
	
	ORKTaskViewController *taskViewController =
	[[ORKTaskViewController alloc] initWithTask:task taskRunUUID:nil];
	taskViewController.delegate = self;
	
	[self presentViewController:taskViewController animated:YES completion:nil];
}

- (void)taskViewController:(ORKTaskViewController *)taskViewController didFinishWithReason:(ORKTaskViewControllerFinishReason)reason error:(NSError *)error
{
	ORKTaskResult *feedbackComplete = [taskViewController result];
	
	ORKStepResult *feedbackProvided = (ORKStepResult *) [feedbackComplete.results lastObject];
	
	if (reason == ORKTaskViewControllerFinishReasonCompleted)
	{
		
		NSString *feedbackString = [[feedbackProvided.results firstObject] valueForKey:@"answer"];
		
		// obtain input value from [[finalResult.results firstObject] valueForKey:@"answer"]
		// send this value to haven api, then send results of that to kinvey
		
		NSURL *URL = [NSURL URLWithString:@"https://api.havenondemand.com/1/api/sync/analyzesentiment/v1"];
		
		NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:URL];
		request.HTTPMethod = @"POST";
		
		NSString *httpBody = [NSString stringWithFormat:@"apikey=72e6bddf-7f53-4779-90e9-7b27688792a5&text=%@", feedbackString];
		request.HTTPBody = [httpBody dataUsingEncoding:NSUTF8StringEncoding];
		
		SVHUD_SHOW;
		
		[[[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {
			
			if (error)
				return;
			
			@try {
				id jsonData = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&error];
				NSLog(@"analyzesentiment:\n%@", jsonData);
				
				CGFloat aggscore = [[jsonData valueForKeyPath:@"aggregate.score"] doubleValue];
				NSString *aggString = [jsonData valueForKeyPath:@"aggregate.sentiment"];
				
				NSLog(@"Agg score = %.4f | Agg string = %@", aggscore, aggString);
				
				// Save to core data
				[Feedback createNewFeedbackWithDate:[NSDate date] review:aggString value:aggscore];
				
				// Push to server
				
				OnlineFeedback *feedback = [[OnlineFeedback alloc] init];
				feedback.dateOfUpload = [NSDate date];
				feedback.valueForFeedback = [NSNumber numberWithFloat:aggscore];
				feedback.review = aggString;
    //            feedback.programName = [NSString stringWithFormat:@"SorteSwag%i", arc4random_uniform(9)+1];
				feedback.programName = [[NSUserDefaults standardUserDefaults] objectForKey:@"CurrentProgram"];
				
				[store saveObject:feedback withCompletionBlock:^(NSArray *objectsOrNil, NSError *errorOrNil)
				 {
					 if (errorOrNil != nil)
					 {
						 //save failed
						 NSLog(@"Save failed, with error: %@", [errorOrNil localizedFailureReason]);
					 } else
					 {
						 //save was successful
						 NSLog(@"successful save");
					 }
				 } withProgressBlock:nil];
				
				SVHUD_HIDE;
				[self dismissViewControllerAnimated:YES completion:nil];
				
			}
			@catch (NSException *exception)
			{
				
			}
			
		}] resume];
	}
	else
	{
		[self dismissViewControllerAnimated:YES completion:nil];
	}
	
}


@end
